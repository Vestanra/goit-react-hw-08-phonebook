{"version":3,"file":"static/js/466.3b44fa32.chunk.js","mappings":"iUAOaA,EAAY,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,MAAdD,UAEFE,EAAeC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KACFG,SAAS,YACdC,SAAUJ,EAAAA,KACLG,SAAS,cAGlB,OACI,SAAC,IAAD,CAAME,GAAiB,SAAbR,EAAoB,WAAW,WAAYS,MAAM,SAASC,QAAQ,SAASC,EAAE,QAAvF,UACI,SAAC,KAAD,CAAKH,GAAiB,SAAbR,EAAoB,WAAW,WAAYY,EAAG,EAAGC,QAAQ,KAAlE,UACI,SAAC,KAAD,CACIC,cACI,CACIT,MAAO,GACPE,SAAU,IAGlBQ,iBAAkBb,EAClBc,SAAU,SAACC,EAAOC,GACdpB,GAASqB,EAAAA,EAAAA,IAAMF,IACfC,EAAOE,WACV,EAXL,UAaI,SAAC,KAAD,WACI,UAAC,IAAD,CAAQC,QAAS,EAAGZ,MAAM,aAA1B,WACI,UAAC,KAAD,YACI,SAAC,IAAD,CAAWa,QAAQ,QAAnB,SAA2B,WAC3B,SAAC,KAAD,CAAOC,KAAK,QAAQC,KAAK,QAAQC,GAAG,QAAQC,GAAIC,EAAAA,EAAOC,QAAQ,SAASpB,GAAiB,SAAbR,EAAoB,WAAW,aAC3G,SAAC,IAAD,CAAW6B,UAAU,OAAOL,KAAK,cAErC,UAAC,KAAD,YACI,SAAC,IAAD,CAAWF,QAAQ,WAAnB,SAA8B,cAC9B,SAAC,KAAD,CAAOC,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAWC,GAAIC,EAAAA,EAAOC,QAAQ,SAASpB,GAAiB,SAAbR,EAAoB,WAAW,aACpH,SAAC,IAAD,CAAW6B,UAAU,OAAOL,KAAK,iBAErC,SAAC,IAAD,CAAQD,KAAK,SAASO,YAAY,OAAOtB,GAAiB,SAAbR,EAAoB,WAAW,WAAY+B,MAAM,OAA9F,SAAqG,qBAOhI,EC5CD,EAPc,WACV,OACA,0BACI,SAAClC,EAAD,KAEP,C","sources":["components/LoginForm.js","pages/Login.js"],"sourcesContent":["import { Box, Button, Flex, FormControl, FormLabel, Input, VStack, useColorMode } from \"@chakra-ui/react\";\nimport { Field, Form, Formik } from \"formik\";\nimport * as Yup from 'yup';\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"redux/auth/authOperations\";\nimport { ErrorText } from \"./styled/styled\";\n\nexport const LoginForm = () => {\n    const dispatch = useDispatch();\n    const { colorMode } = useColorMode();\n\n    const SignupSchema = Yup.object().shape({\n        email: Yup.string()\n            .required('Required'),\n        password: Yup.string()\n            .required('Required'),\n    });\n\n    return (\n        <Flex bg={colorMode ==='dark'?\"gray.600\":\"gray.200\"} align=\"center\" justify=\"center\" h=\"100vh\">\n            <Box bg={colorMode ==='dark'?\"gray.400\":\"gray.100\"} p={6} rounded=\"md\">\n                <Formik\n                    initialValues={\n                        {\n                            email: '',\n                            password: '',\n                        }\n                    }\n                    validationSchema={SignupSchema}\n                    onSubmit={(value, action) => {\n                        dispatch(login(value));\n                        action.resetForm();\n                    }}\n                >\n                    <Form>\n                        <VStack spacing={4} align=\"flex-start\">\n                            <FormControl>\n                                <FormLabel htmlFor=\"email\">Email</FormLabel>\n                                <Field type=\"email\" name=\"email\" id=\"email\" as={Input} variant=\"filled\" bg={colorMode ==='dark'?\"gray.300\":\"gray.50\"}/>\n                                <ErrorText component=\"span\" name=\"email\" />\n                            </FormControl>\n                            <FormControl>\n                                <FormLabel htmlFor=\"password\">Password</FormLabel>\n                                <Field type=\"password\" name=\"password\" id=\"password\" as={Input} variant=\"filled\" bg={colorMode ==='dark'?\"gray.300\":\"gray.50\"} />\n                                <ErrorText component=\"span\" name=\"password\" />\n                            </FormControl>\n                            <Button type=\"submit\" colorScheme=\"blue\" bg={colorMode ==='dark'?\"blue.600\":\"blue.700\"} width=\"full\">Log In</Button>\n                        </VStack>\n                    </Form>\n                </Formik>\n            </Box>\n        </Flex>\n    )\n};","import { LoginForm } from \"components/LoginForm\";\n\nconst Login = () => {\n    return (\n    <div>\n        <LoginForm/>\n    </div>)\n};\n\nexport default Login;"],"names":["LoginForm","dispatch","useDispatch","colorMode","useColorMode","SignupSchema","Yup","shape","email","required","password","bg","align","justify","h","p","rounded","initialValues","validationSchema","onSubmit","value","action","login","resetForm","spacing","htmlFor","type","name","id","as","Input","variant","component","colorScheme","width"],"sourceRoot":""}