{"version":3,"file":"static/js/600.3f1bc178.chunk.js","mappings":"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","sources":["components/ContactList.js","components/Filter.js","../node_modules/@chakra-ui/toast/src/use-toast.tsx","components/ContactForm.js","pages/Contacts.js","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { selectVisibleContacts } from \"redux/contacts/filterSlice\";\nimport { deleteContact } from \"redux/contacts/operations\";\nimport { selectError, selectIsLoading } from \"redux/contacts/contactsSlice\";\nimport { Box, Button, Flex, Text } from \"@chakra-ui/react\";\n\nexport const ContactList = () => {\n    const dispatch = useDispatch();\n    const visibleContacts = useSelector(selectVisibleContacts);\n    const isError = useSelector(selectError);\n    const isLoading = useSelector(selectIsLoading);\n\n    return (\n        <Box w={500}>\n            <ul>\n            {visibleContacts.map(({ id, name, number }) =>\n                <Flex as=\"li\" key={id} justify=\"space-between\"  alignItems=\"center\" border='1px' mb={0.5} p={1} pr={2} pl={2}>\n                    <p><Text as=\"span\" fontWeight={500} mr={2}>{name}:</Text>{number}</p>\n                    <Button type=\"button\" onClick={() => dispatch(deleteContact(id))} colorScheme=\"gray\">Delete</Button>\n                </Flex>)}\n                {visibleContacts.length <= 0 && !isError && !isLoading &&\n                    <Text as=\"p\" display=\"flex\" justifyContent=\"center\" mt={2}>You don't have contacts</Text>}\n      </ul>\n        </Box>\n    )\n}\n\n","import { Box, FormLabel, Input, useColorMode } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const { colorMode } = useColorMode();\n    return (<Box mb={6} mt={6} w={500}>\n        <FormLabel htmlFor=\"contact\" fontSize='xl'>Find contacts by name</FormLabel>\n        <Input type=\"text\" name=\"contact\" id=\"contact\" variant=\"filled\"  bg={colorMode === 'dark' ? \"gray.300\" : \"gray.50\"}\n            onChange={(evt) => dispatch(changeFilter(evt.target.value))}></Input>\n    </Box>\n    );\n};\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n","import { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/operations';\nimport { Box, Button, Flex, FormControl, FormLabel, Input, VStack, useColorMode, useToast } from '@chakra-ui/react';\nimport { ErrorText } from './styled/styled';\n\n\nconst phoneRegExp = /^\\d{3}-\\d{3}-\\d{4}$/;\n\nconst SignupSchema = Yup.object().shape({\n   name: Yup.string()\n     .min(1, 'Too Short!')\n     .max(50, 'Too Long!')\n     .required('Required'),\n   number: Yup.string()\n     .matches(phoneRegExp, 'Incorrect phone, example(111-111-1111)')\n     .required('Required'),\n });\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const toast = useToast();\n    const { colorMode } = useColorMode();\n\n    return (\n        <Flex  align=\"center\"   >\n            <Box bg={colorMode === 'dark' ? \"gray.400\" : \"gray.100\"} p={6} rounded=\"md\" w={500}>\n                <Formik\n                    initialValues={{ name: \"\", number: \"\" }}\n                    validationSchema={SignupSchema}\n            \n                    onSubmit={(value, action) => {\n                        if (contacts.some(el => el.name === value.name)) {\n                            return toast({\n                                title: `${value.name} is already in contacts.`,\n                                status: 'info',\n                                duration: 2000,\n                                isClosable: true,\n                                position: 'top',\n                            });\n                        }\n                        dispatch(addContact(value));\n                        toast({\n                            title: `Contact ${value.name} created.`,\n                            status: 'success',\n                            duration: 2000,\n                            isClosable: true,\n                            position: 'top',\n                        });\n                        action.resetForm();\n                    }}\n                >\n                    <Form >\n                        <VStack spacing={4} align=\"flex-start\">\n                            <FormControl htmlFor=\"name\">\n                                <FormLabel>Name</FormLabel>\n                                <Field type=\"text\" name=\"name\" id=\"name\" as={Input} variant=\"filled\" bg={colorMode === 'dark' ? \"gray.300\" : \"gray.50\"} />\n                                <ErrorText component=\"span\" name=\"name\" color=\"yellow.400\" />\n                            </FormControl>\n                            <FormControl htmlFor=\"number\">\n                                <FormLabel>Number</FormLabel>\n                                <Field type=\"tel\" name=\"number\" id=\"number\" placeholder=\"000-000-0000\" as={Input} variant=\"filled\" bg={colorMode === 'dark' ? \"gray.300\" : \"gray.50\"} />\n                                <ErrorText component=\"span\" name=\"number\" />\n                            </FormControl>\n                            <Button type=\"submit\" colorScheme=\"blue\" bg={colorMode ==='dark'?\"blue.600\":\"blue.700\"} width=\"full\" disabled={isLoading}>Add contact</Button>\n                        </VStack>\n                    </Form>\n                </Formik>\n            </Box>\n        </Flex>\n        \n    )\n};\n","import { ContactList } from \"components/ContactList\";\nimport { Filter } from \"components/Filter\";\nimport { selectError, selectIsLoading } from \"redux/contacts/contactsSlice\";\nimport { selectVisibleContacts } from \"redux/contacts/filterSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ContactForm } from \"components/ContactForm\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { Flex, Heading, Spinner, Text } from \"@chakra-ui/react\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch]);\n    \n    return (\n        <Flex direction=\"column\" alignItems=\"center\">\n            <Heading as=\"h1\" mt={6} mb={6}>Phonebook</Heading>\n            <ContactForm />\n            <Filter />\n            <Heading as=\"h2\" fontSize='xl'>Contacts ({visibleContacts.length})</Heading>\n            {isLoading && <Spinner thickness='4px' speed='0.65s' emptyColor='gray.200' color='blue.500' size='xl' />}\n            <ContactList />\n            {error && <Text as=\"p\" color=\"orange.500\" mt={3} fontSize=\"xl\">Oops... Something went wrong</Text>}\n        </Flex>\n    )\n};\n\nexport default Contacts;","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["ContactList","dispatch","useDispatch","visibleContacts","useSelector","selectVisibleContacts","isError","selectError","isLoading","selectIsLoading","w","map","id","name","number","as","justify","alignItems","border","mb","p","pr","pl","fontWeight","mr","type","onClick","deleteContact","colorScheme","length","display","justifyContent","mt","Filter","colorMode","useColorMode","htmlFor","fontSize","I","variant","bg","onChange","evt","changeFilter","target","value","theme","defaultOptions","useToastOptionContext","useToast","createToastFn","useChakra","options","useMemo","direction","SignupSchema","Yup","shape","min","max","required","matches","ContactForm","contacts","selectContacts","toast","align","rounded","initialValues","validationSchema","onSubmit","action","some","el","title","status","duration","isClosable","position","addContact","resetForm","spacing","Input","component","color","placeholder","width","disabled","error","useEffect","fetchContacts","thickness","speed","emptyColor","size","props","forwardRef","styles","className","rest","useStyleConfig","omitThemingProps","__css","h2","Heading","chakra","cx"],"sourceRoot":""}