{"version":3,"file":"static/js/771.193f06bf.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","pages/Home.js","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import { Flex, Heading, Image } from \"@chakra-ui/react\";\nimport { useSelector } from \"react-redux\";\nimport { selectIsLoggedIn, selectUser } from \"redux/auth/authSelectors\";\n\nconst Home = () => {\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n    const user = useSelector(selectUser);\n    return (<Flex  direction=\"column\" alignItems=\"center\" >\n        {isLoggedIn ?\n            <Heading as=\"h1\" fontSize='2xl' mt={40}>{`${user.name}, enjoy using the phonebook :)`}</Heading> :\n            <Heading as=\"h1\" fontSize='2xl' mt={40}>To use the phonebook, please log in</Heading>}\n        <Image src=\"https://static.wixstatic.com/media/60c27b_2b794936a1314919bc7a247a828f03ac.png/v1/fill/w_227,h_177,al_c,q_85,enc_auto/60c27b_2b794936a1314919bc7a247a828f03ac.png\"\n            boxSize='200px' objectFit='cover' alt=\"cat\" mt={8} />\n    </Flex>)\n};\n\nexport default Home;","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["props","forwardRef","htmlWidth","htmlHeight","alt","rest","width","height","NativeImage","displayName","fallback","keysToOmit","srcSet","align","fit","loading","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","providedFallback","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shared","objectFit","src","onLoad","onError","sizes","useState","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","Image","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","omit","objectPosition","as","Object","assign","key","ref","clone","fallbackSrc","object","chakra","isLoggedIn","useSelector","selectIsLoggedIn","user","selectUser","direction","alignItems","fontSize","mt","name","boxSize","styles","className","useStyleConfig","omitThemingProps","__css","h2","Heading","cx"],"sourceRoot":""}